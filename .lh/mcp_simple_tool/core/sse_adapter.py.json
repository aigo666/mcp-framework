{
    "sourceFile": "mcp_simple_tool/core/sse_adapter.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741332352813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741332593156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,1 @@\n-\"\"\"\n-SSE适配器，用于处理MCP与SSE的交互\n-\"\"\"\n-\n-import anyio\n-from mcp.server.lowlevel import Server\n-from mcp.server.sse import SseServerTransport\n-from starlette.applications import Starlette\n-from starlette.routing import Mount, Route\n-from starlette.middleware import Middleware\n-from starlette.middleware.cors import CORSMiddleware\n-import uvicorn\n-from typing import List, Optional, Dict, Any\n-import mcp.types as types\n-from ..tools import BaseTool\n-\n-\n-class SseAdapter:\n-    \"\"\"\n-    SSE适配器，用于处理MCP与SSE的交互\n-    \"\"\"\n-    \n-    def __init__(self, app_name: str, tools: List[BaseTool], host: str = \"0.0.0.0\", port: int = 8000):\n-        \"\"\"\n-        初始化SSE适配器\n-        \n-        Args:\n-            app_name: 应用名称\n-            tools: 工具列表\n-            host: 主机地址\n-            port: 端口号\n-        \"\"\"\n-        self.app_name = app_name\n-        self.tools = tools\n-        self.host = host\n-        self.port = port\n-        self.app = Server(app_name)\n-        \n-    def setup(self):\n-        \"\"\"\n-        设置MCP服务器\n-        \"\"\"\n-        # 注册工具调用函数\n-        @self.app.call_tool()\n-        async def fetch_tool(name: str, arguments: dict) -> List[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n-            \"\"\"\n-            工具调用函数\n-            \n-            Args:\n-                name: 工具名称\n-                arguments: 工具参数\n-                \n-            Returns:\n-                工具执行结果\n-            \"\"\"\n-            # 查找匹配的工具\n-            for tool in self.tools:\n-                if tool.name == name:\n-                    return await tool.execute(arguments)\n-            \n-            # 如果没有找到匹配的工具，返回错误信息\n-            return [types.TextContent(\n-                type=\"text\",\n-                text=f\"错误: 未知工具: {name}\"\n-            )]\n-        \n-        # 注册工具列表函数\n-        @self.app.list_tools()\n-        async def list_tools() -> List[types.Tool]:\n-            \"\"\"\n-            列出所有可用的工具\n-            \n-            Returns:\n-                工具定义列表\n-            \"\"\"\n-            return [tool.to_tool_definition() for tool in self.tools]\n-    \n-    def run(self):\n-        \"\"\"\n-        运行SSE服务器\n-        \"\"\"\n-        # 设置MCP服务器\n-        self.setup()\n-        \n-        # 创建SSE传输\n-        sse = SseServerTransport(\"/messages/\")\n-        \n-        # 处理SSE请求\n-        async def handle_sse(request):\n-            # 增加超时时间，以便处理大型文件\n-            request.scope[\"timeout\"] = 300  # 设置为5分钟\n-            async with sse.connect_sse(\n-                request.scope, request.receive, request._send\n-            ) as streams:\n-                await self.app.run(\n-                    streams[0], streams[1], self.app.create_initialization_options()\n-                )\n-        \n-        # 添加CORS中间件以允许跨域请求\n-        middleware = [\n-            Middleware(\n-                CORSMiddleware,\n-                allow_origins=[\"*\"],\n-                allow_methods=[\"*\"],\n-                allow_headers=[\"*\"],\n-            )\n-        ]\n-        \n-        # 创建Starlette应用\n-        starlette_app = Starlette(\n-            debug=True,\n-            routes=[\n-                Route(\"/sse\", endpoint=handle_sse),\n-                Mount(\"/messages/\", app=sse.handle_post_message),\n-            ],\n-            middleware=middleware,\n-        )\n-        \n-        # 运行服务器\n-        uvicorn.run(\n-            starlette_app, \n-            host=self.host, \n-            port=self.port,\n-            timeout_keep_alive=300,  # 增加保持连接的超时时间\n-        ) \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741332352813,
            "name": "Commit-0",
            "content": "\"\"\"\nSSE适配器，用于处理MCP与SSE的交互\n\"\"\"\n\nimport anyio\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.sse import SseServerTransport\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount, Route\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.cors import CORSMiddleware\nimport uvicorn\nfrom typing import List, Optional, Dict, Any\nimport mcp.types as types\nfrom ..tools import BaseTool\n\n\nclass SseAdapter:\n    \"\"\"\n    SSE适配器，用于处理MCP与SSE的交互\n    \"\"\"\n    \n    def __init__(self, app_name: str, tools: List[BaseTool], host: str = \"0.0.0.0\", port: int = 8000):\n        \"\"\"\n        初始化SSE适配器\n        \n        Args:\n            app_name: 应用名称\n            tools: 工具列表\n            host: 主机地址\n            port: 端口号\n        \"\"\"\n        self.app_name = app_name\n        self.tools = tools\n        self.host = host\n        self.port = port\n        self.app = Server(app_name)\n        \n    def setup(self):\n        \"\"\"\n        设置MCP服务器\n        \"\"\"\n        # 注册工具调用函数\n        @self.app.call_tool()\n        async def fetch_tool(name: str, arguments: dict) -> List[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n            \"\"\"\n            工具调用函数\n            \n            Args:\n                name: 工具名称\n                arguments: 工具参数\n                \n            Returns:\n                工具执行结果\n            \"\"\"\n            # 查找匹配的工具\n            for tool in self.tools:\n                if tool.name == name:\n                    return await tool.execute(arguments)\n            \n            # 如果没有找到匹配的工具，返回错误信息\n            return [types.TextContent(\n                type=\"text\",\n                text=f\"错误: 未知工具: {name}\"\n            )]\n        \n        # 注册工具列表函数\n        @self.app.list_tools()\n        async def list_tools() -> List[types.Tool]:\n            \"\"\"\n            列出所有可用的工具\n            \n            Returns:\n                工具定义列表\n            \"\"\"\n            return [tool.to_tool_definition() for tool in self.tools]\n    \n    def run(self):\n        \"\"\"\n        运行SSE服务器\n        \"\"\"\n        # 设置MCP服务器\n        self.setup()\n        \n        # 创建SSE传输\n        sse = SseServerTransport(\"/messages/\")\n        \n        # 处理SSE请求\n        async def handle_sse(request):\n            # 增加超时时间，以便处理大型文件\n            request.scope[\"timeout\"] = 300  # 设置为5分钟\n            async with sse.connect_sse(\n                request.scope, request.receive, request._send\n            ) as streams:\n                await self.app.run(\n                    streams[0], streams[1], self.app.create_initialization_options()\n                )\n        \n        # 添加CORS中间件以允许跨域请求\n        middleware = [\n            Middleware(\n                CORSMiddleware,\n                allow_origins=[\"*\"],\n                allow_methods=[\"*\"],\n                allow_headers=[\"*\"],\n            )\n        ]\n        \n        # 创建Starlette应用\n        starlette_app = Starlette(\n            debug=True,\n            routes=[\n                Route(\"/sse\", endpoint=handle_sse),\n                Mount(\"/messages/\", app=sse.handle_post_message),\n            ],\n            middleware=middleware,\n        )\n        \n        # 运行服务器\n        uvicorn.run(\n            starlette_app, \n            host=self.host, \n            port=self.port,\n            timeout_keep_alive=300,  # 增加保持连接的超时时间\n        ) "
        }
    ]
}